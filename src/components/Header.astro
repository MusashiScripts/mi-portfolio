---
/* import ThemeToggle from "./ThemeToggle.astro" */

const navItems = [
  {
    title: "Experiencia",
    label: "experience",
    url: "/#experience",
  },
  {
    title: "Proyectos",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "About",
    label: "about",
    url: "/#about",
  },
  {
    title: "Contacto",
    label: "contact",
    url: "mailto:alejarteaga2003@gmail.com",
  },
]

/* bg-gray-200 dark:bg-black/70  */
---

<header class="fixed top-0 z-10 flex justify-center items-center h-auto w-full 
dark:w-full mx-auto mt-2">

  <nav class= "
  bg-gray-200 dark:bg-black/80
  text-gray-800 dark:text-gray-200
  flex justify-center items-center gap-x-2 px-3 py-1.5 
  text-sm font-medium rounded-full z-10
   ">
    {
      navItems.map((link) => (
        <a
          class="rounded-full relative block px-2 py-1 
          hover:text-blue-500 transition"
          aria-label={link.label}
          href={link.url}
          target={ link.url === "mailto:alejarteaga2003@gmail.com" ? "_blank" : null }
        >
          {link.title}
        </a>
      ))
    }
  <!--   <ThemeToggle /> -->
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {

    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('header nav a')
  
    const callback = (entries: any[]) => {
      entries.forEach(entry => {
        if(entry.isIntersecting){
          navItems.forEach(item => {
            if(item.getAttribute('aria-label') == entry.target.id){
              item.classList.add('text-blue-500')
            }else{
              item.classList.remove('text-blue-500')
            }
          })
        }
      })
    }
  
    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.2
    })
  
    sections.forEach(section => observer.observe(section))
  
    // Cleanup function
    document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect()
        } else {
          sections.forEach((section) => {
            observer.observe(section)
          })
        }
      }

  })

</script>