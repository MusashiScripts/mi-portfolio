---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Experiencia",
    label: "experience",
    url: "/#experience",
  },
  {
    title: "Proyectos",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "About",
    label: "about",
    url: "/#about",
  },
  {
    title: "Contacto",
    label: "contact",
    url: "mailto:alejarteaga2003@gmail.com",
  },
]

/* bg-gray-200 dark:bg-black/70  */
---

<header class="fixed top-0 z-10 flex justify-center items-center h-auto w-full 
dark:w-full mx-auto mt-2">

  <nav id="header-nav" class= "
  text-gray-200
  flex justify-center items-center gap-x-2 px-3 py-1.5 
  text-sm font-medium rounded-full
   ">
    {
      navItems.map((link) => (
        <a
          class="rounded-full relative block px-2 py-1 
          
         hover:text-blue-500 transition"
          aria-label={link.label}
          href={link.url}
          target={ link.url === "mailto:alejarteaga2003@gmail.com" ? "_blank" : null }
        >
          {link.title}
        </a>
      ))
    }
    <!-- <ThemeToggle /> -->
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {

    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('header > nav > a')
  
    const callback = (entries: any[]) => {
      entries.forEach(entry => {
        if(entry.isIntersecting){
          navItems.forEach(item => {
            if(item.getAttribute('aria-label') == entry.target.id){
              item.classList.add('text-blue-500')
            }else{
              item.classList.remove('text-blue-500')
            }
          })
        }
      })
    }
  
    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.2
    })
  
    sections.forEach(section => observer.observe(section))
  
    // Cleanup function
    document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect()
        } else {
          sections.forEach((section) => {
            observer.observe(section)
          })
        }
      }

  })

</script>

<style>
  #header-nav {
        animation: blur linear both 0.5s;
        animation-timeline: scroll();
        animation-range: 0 400px;
      }

      @keyframes blur {
        to {
          backdrop-filter: blur(20px);
          border-width: 1px;
          border-color: rgba(0, 0, 0);
          padding: 0.25rem 0.75rem;
          display: flex;
          flex-direction: row;
          align-items: center;
          background-color: rgb(229, 229, 229, 0.6);
          border-radius: 9999px;
        }
      }

      @media (prefers-color-scheme: dark) {
        @keyframes blur {
          from {
            border: 0px;
          }
          to {
            box-shadow:
              0px 5px 50px -5px rgba(0, 0, 0, 0.1),
              0px 0px 0 1px rgba(0, 0, 0, 0.3);
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
            border-width: 1px;
            border-color: rgba(0, 0, 0);
            padding-left: 0.75rem;
            padding-right: 0.75rem;
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            display: flex;
            flex-direction: row;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 9999px;
          }
        }
      }
</style>