---
import SunIcon from "../icons/Sun.astro"
import MoonIcon from "../icons/Moon.astro"
import SystemIcon from "../icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById('themes-menu')

  /* Obtener el theme preference del local Storage si existe, y sino
  se comprueba mediante el window.matchmedia().matches */

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem('theme') ?? "system"
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches
    ? 'dark'
    : 'light'
  }

  

  //Actualizar el icono
  const updateIcon = (themePreference) => {
    const themeIcons = document.querySelectorAll('.theme-toggle-icon')
    themeIcons.forEach(icon => {
      icon.getAttribute('id') === themePreference ? icon.style.scale = 1 : icon.style.scale = 0
    })
  }

  //Update Theme
  const updateTheme = () => {
    if (remove != null) {
      remove()
    }
    matchMedia.addEventListener("change", updateTheme)
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme)
    }
    
    const themePreference = getThemePreference()
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches)

    updateIcon(themePreference)
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")
  }

  updateTheme()
  
  //Mostrar el menu haciendo click al button
  const menuButton = document.getElementById('theme-toggle-btn')
  menuButton.addEventListener('click', (e) => {
    e.stopPropagation()
    !themesMenu.classList.contains('open') 
    ? themesMenu.classList.add('open') 
    : themesMenu.classList.remove('open') 
  })

  //Cerrar el menu al hacer click fuera de Ã©l
  document.addEventListener("click", () => themesMenu.classList.remove("open"))

  //Dandole funcionalidad a las opciones del menu
  const menuOptions = document.querySelectorAll('.themes-menu-option')
  menuOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      localStorage.setItem('theme', e.target.textContent.toLowerCase().trim())
      updateTheme()
    })
  })

  document.addEventListener('astro:after-swap', () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  })
  

</script>